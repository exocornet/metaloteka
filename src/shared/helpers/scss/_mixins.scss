// ==> медиазапросы экранов отображения
// Миксин media принимает два параметра $media и $orientation.
// - Первый параметр $media принимает ключи медиазапроса которые указны в $breakpoints.
// - Второй параметр $orientation принимает три значения min, max и within.
// - Параметру $orientation по изначально назначен min (по mobile first).
@mixin media($media,  $orientation: $media-direction) {
	@each $breakpoint, $value in $breakpoints {
		@if $media == $breakpoint {
			@if $orientation == "min" { // от большего разрешения к меньшему (включительно)
				@media screen and (#{$orientation}-width: ($value + 1) + 'px') {
					@content;
				}
			} @else if $orientation == "max" { // от меньшего разрешения к большему (включительно)
				@media screen and (#{$orientation}-width: $value + 'px') {
					@content;
				}
			} @else if $orientation == "within" { // для конкретного разрешения
				@if (index(map-keys($breakpoints), $media) > 1) {
					@media screen and (min-width: (getPreviousSize($media) + 1) + "px") and (max-width: $value + "px") {
						@content;
					}
				} @else {
					@media screen and (max-width: $value + "px") {
						@content;
					}
				}
			}
		}
	}
}


// ==> подключение шрифтов
// Миксин connectFonts принимает 5 параметров.
@mixin connectFonts($family, $file, $weight: normal, $style: normal, $path: "../layout/assets/fonts/") {
	@font-face {
		font-family: $family;
		src: url($path + $file + '.eot');
		src: local($file), local($file),
			url($path + $file + '.eot?#iefix') format("embedded-opentype"),
			url($path + $file + '.woff') format("woff"),
			url($path + $file + '.ttf') format("truetype");

		font-weight: $weight;
		font-style: $style;
		font-stretch: normal;
		font-display: swap;
	}
}
